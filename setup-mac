#!/bin/sh

# My new Mac setup script, most of it ganked from
# https://github.com/thoughtbot/laptop

DOTFILES_ROOT="$HOME/dotfiles"

link_file () {
  local src=$1 dst=$2
  rm -rf "$dst"
  ln -s "$1" "$2"
  fancy_echo "linked" "$1" "to" $"2"
}

fancy_echo() {
  local fmt="$1"; shift

  printf "\n$fmt\n" "$@"
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="${2:-0}"

  zshrc="$HOME/.zshrc"

  if ! grep -Fqs "$text" "$zshrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\n" "$text" >> "$zshrc"
    else
      printf "\n%s\n" "$text" >> "$zshrc"
    fi
  fi
}

trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

fancy_echo "Creating symlinks ..."

for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink')
do
  dst="$HOME/.$(basename "${src%.*}")"
  link_file "$src" "$dst"
done

fancy_echo "Creating directories ..."

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

if [ ! -d "$HOME/github/" ]; then
  mkdir "$HOME/github"
fi

if [ ! -d "$HOME/vagrant/" ]; then
  mkdir "$HOME/vagrant"
fi

if [ ! -f "$HOME/.zshrc" ]; then
  touch "$HOME/.zshrc"
fi

append_to_zshrc 'export PATH="$HOME/.bin:$PATH"'

HOMEBREW_PREFIX="/usr/local"

if [ -d "$HOMEBREW_PREFIX" ]; then
  if ! [ -r "$HOMEBREW_PREFIX" ]; then
    sudo chown -R "$LOGNAME:admin" /usr/local
  fi
else
  sudo mkdir "$HOMEBREW_PREFIX"
  sudo chflags norestricted "$HOMEBREW_PREFIX"
  sudo chown -R "$LOGNAME:admin" "$HOMEBREW_PREFIX"
fi

update_shell() {
  local shell_path;
  shell_path="$(which zsh)"

  fancy_echo "Changing your shell to zsh ..."
  if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
    fancy_echo "Adding '$shell_path' to /etc/shells"
    sudo sh -c "echo $shell_path >> /etc/shells"
  fi
  chsh -s "$shell_path"
}

case "$SHELL" in
  */zsh)
    if [ "$(which zsh)" != '/usr/local/bin/zsh' ] ; then
      update_shell
    fi
    ;;
  *)
    update_shell
    ;;
esac

gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    gem update "$@"
  else
    gem install "$@"
  fi
}

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
    curl -fsS \
      'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby

    append_to_zshrc '# recommended by brew doctor'

    # shellcheck disable=SC2016
    append_to_zshrc 'export PATH="/usr/local/bin:$PATH"' 1

    export PATH="/usr/local/bin:$PATH"
fi

if brew list | grep -Fq brew-cask; then
  fancy_echo "Uninstalling old Homebrew-Cask ..."
  brew uninstall --force brew-cask
fi

fancy_echo "Updating Homebrew formulas ..."
brew update

fancy_echo "Installing Homebrew formulas ..."
brew "zsh"
brew "git"
brew "the_silver_searcher"
brew "vim", args: ["with-override-system-vi"]
brew "imagemagick"
brew "tree"
brew "watch"
brew "openssl"
brew "mas"
brew "gnu-sed", args: ["with-default-names"]
brew "wget"
brew "thefuck"

# More recent versions
brew "coreutils"
brew "findutils"
brew "bash"
brew "gnu-tar"

# dupes
brew "grep"
brew "rsync"

# Apps
cask "1password"
cask "alfred"
cask "carbon-copy-cloner"
cask "cleanmymac"
cask "dropbox"
cask "evernote"
cask "flash"
cask "firefox"
cask "hyper"
scask "google-chrome"
cask "imageoptim"
cask "kaleidoscope"
cask "macdown"
cask "plistedit-pro"
cask "sequel-pro"
cask "sizeup"
cask "skype"
cask "slack"
cask "sourcetree"
cask "sublime-text"
cask "the-unarchiver"
cask "tower"
cask "transmit"
cask "vagrant"
cask "virtualbox"

# Quicklook plugins
# https://github.com/sindresorhus/quick-look-plugins
cask "qlcolorcode"
cask "qlstephen"
cask "qlmarkdown"
cask "quicklook-json"
cask "qlprettypatch"
cask "quicklook-csv"
cask "betterzipql"
cask "qlimagesize"
cask "webpquicklook"
cask "suspicious-package"
cask "quicklookase"
cask "qlvideo"

# Fonts
cask "font-source-code-pro"

# brew bundle it
# https://github.com/Homebrew/homebrew-bundle
brew bundle

append_to_zshrc 'export PATH="$(brew --prefix coreutils)/libexec/gnubin:$PATH"' 1

fancy_echo "Configuring asdf version manager..."
if [ ! -d "$HOME/.asdf" ]; then
  git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.3.0
  append_to_zshrc "source $HOME/.asdf/asdf.sh" 1
fi

install_asdf_plugin() {
  local name="$1"
  local url="$2"

  if ! asdf plugin-list | grep -Fq "$name"; then
    asdf plugin-add "$name" "$url"
  fi
}

# shellcheck disable=SC1090
source "$HOME/.asdf/asdf.sh"
install_asdf_plugin "ruby" "https://github.com/asdf-vm/asdf-ruby.git"
install_asdf_plugin "nodejs" "https://github.com/asdf-vm/asdf-nodejs.git"

install_asdf_language() {
  local language="$1"
  local version
  version="$(asdf list-all "$language" | tail -1)"

  if ! asdf list "$language" | grep -Fq "$version"; then
    asdf install "$language" "$version"
    asdf global "$language" "$version"
  fi
}

fancy_echo "Installing latest Ruby..."
install_asdf_language "ruby"
gem update --system
gem_install_or_update "bundler"
number_of_cores=$(sysctl -n hw.ncpu)
bundle config --global jobs $((number_of_cores - 1))

fancy_echo "Installing latest Node..."
bash "$HOME/.asdf/plugins/nodejs/bin/import-release-team-keyring"
install_asdf_language "nodejs"

fancy_echo "Node packages ..."

# Node packages
npm install -g gulp
npm install -g bower
npm install -g pure-prompt

fancy_echo "Installing gems ..."

# Gems
gem_install_or_update 'sass'
